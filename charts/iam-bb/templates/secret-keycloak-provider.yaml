{{ if .Values.iam.keycloak.configuration.useCrossplane -}}
{{ if .Values.iam.keycloak.configuration.provider.create  -}}
{{ if .Values.iam.keycloak.configuration.provider.clientSecret -}}
{{ if not .Values.iam.keycloak.configuration.provider.secretRef.name -}}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: keycloak-provider
  namespace: {{ .Release.Namespace }}
  labels:
    type: provider-credentials
{{- if not .Values.iam.keycloak.configuration.provider.clientSecret }}
  # Note: Automated secret generation is not (yet?) supported.
  #annotations:
  #  secret-generator.v1.mittwald.de/autogenerate: client_secret
{{- end }}
stringData:
  # A plain secret format is documented here: https://github.com/crossplane-contrib/provider-keycloak/tree/main?tab=readme-ov-file#configuration
  # However, it does not really seem to work. Therefore a "mixed" approach is used for now.
  # The "credentials" attribute contains the actual configuration, while the other attributes
  # are only informational. The problem is that there seems to be no way to generate
  # a password into the embedded configuration through kubernetes-secret-generator.
  client_id: "crossplane-keycloak-provider"
{{- if .Values.iam.keycloak.configuration.provider.clientSecret }}
  client_secret: {{ .Values.iam.keycloak.configuration.provider.clientSecret | quote }}
{{- end }}
  #username: "admin"
  #password: "admin"
  url: {{ .Values.iam.keycloak.url }}
  base_path: "/"
  realm: {{ .Values.iam.keycloak.configuration.realm.name }}
  credentials: |
    {
      "client_id": "crossplane-keycloak-provider",
{{- if .Values.iam.keycloak.configuration.provider.clientSecret }}
      "client_secret": {{ .Values.iam.keycloak.configuration.provider.clientSecret | quote }},
{{- end }}
      "url": {{ .Values.iam.keycloak.url | quote }},
      "base_path": "/",
      "realm": {{ .Values.iam.keycloak.configuration.realm.name | quote }}
    }
{{- end }}
{{- end }}
{{- end }}
{{- end }}